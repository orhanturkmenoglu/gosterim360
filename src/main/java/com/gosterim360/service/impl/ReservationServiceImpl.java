package com.gosterim360.service.impl;

import com.gosterim360.dto.request.ReservationRequestDTO;
import com.gosterim360.dto.response.ReservationResponseDTO;
import com.gosterim360.enums.ReservationStatus;
import com.gosterim360.exception.*;
import com.gosterim360.mapper.ReservationMapper;
import com.gosterim360.model.Reservation;
import com.gosterim360.model.Seat;
import com.gosterim360.model.Session;
import com.gosterim360.model.User;
import com.gosterim360.notification.NotificationService;
import com.gosterim360.repository.ReservationRepository;
import com.gosterim360.repository.SeatRepository;
import com.gosterim360.repository.SessionRepository;
import com.gosterim360.repository.UserRepository;
import com.gosterim360.service.ReservationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class ReservationServiceImpl implements ReservationService {

    private final ReservationRepository reservationRepository;
    private final UserRepository userRepository;
    private final SeatRepository seatRepository;
    private  final SessionRepository sessionRepository;
    private final ReservationMapper reservationMapper ;

    private final NotificationService notificationService;


    @Override
    @Transactional
    public ReservationResponseDTO create(ReservationRequestDTO request) {
        log.info("Attempting to create reservation for session: {}, seat: {}", request.getSessionId(), request.getSeatId());
        if (reservationRepository.existsBySession_IdAndSeat_Id(request.getSessionId(), request.getSeatId())) {
            log.warn("Reservation creation failed: seat already reserved for this session");
            throw new ReservationAlreadyExistsException("This seat is already reserved for the selected session.");
        }


        User user = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new UserNotFoundException("User not found"));

        Seat seat = seatRepository.findById(request.getSeatId())
                .orElseThrow(() -> new SeatNotFoundException("Seat not found"));

        Session session = sessionRepository.findById(request.getSessionId())
                .orElseThrow(()->new SessionNotFoundException("Session not found"));

        Reservation reservation = reservationMapper.toEntity(request);
        reservation.setUser(user);
        reservation.setSeat(seat);
        reservation.setSession(session);

        if (reservation.getStatus() == null || (!reservation.getStatus().equals(ReservationStatus.PRE_RESERVED) && !reservation.getStatus().equals(ReservationStatus.PAID))) {
            log.warn("Reservation creation failed: invalid status '{}'", reservation.getStatus());
            throw new ReservationStatusInvalidException("Invalid reservation status.");
        }

        Reservation saved = reservationRepository.saveAndFlush(reservation);
        log.info("Reservation created successfully with id: {}", saved.getId());

        //  Bildirim gÃ¶nderiliyor
        notificationService.sendReservationConfirmation(saved);

        log.info("Reservation created successfully :",saved);

        return reservationMapper.toDTO(saved);
    }

    /*
    Evet, bu @Scheduled gÃ¶rev gayet baÅŸarÄ±lÄ± yazÄ±lmÄ±ÅŸ.
     60 saniyede bir Ã§alÄ±ÅŸÄ±yor ve oluÅŸturulma sÃ¼resi
     1 dakikadan eski olan PRE_RESERVED durumundaki rezervasyonlarÄ±
      EXPIRED olarak iÅŸaretliyor. Bildirim gÃ¶nderip DB'ye kaydediyor. ğŸ‘‡
     */
    @Scheduled(fixedRate = 300_000) // // her 5 dakikada bir Ã§alÄ±ÅŸÄ±r
    @Transactional
    public void  expireUnpaidReservations(){
        Instant threshold = Instant.now().minusSeconds(300); //  5 dakika Ã¶nce
        List<Reservation> expiredReservations = reservationRepository.findExpiredPreReservedReservations(threshold);

        if (expiredReservations.isEmpty()){
            return;
        }

        for (Reservation reservation : expiredReservations){
            reservation.setStatus(ReservationStatus.EXPIRED);
            log.info("Expire task ran but no unpaid PRE_RESERVED reservations older than 5 minutes found.");
            notificationService.sendReservationExpired(reservation);
        }

        reservationRepository.saveAll(expiredReservations);
    }


    @Override
    @Transactional
    public ReservationResponseDTO update(UUID id, ReservationRequestDTO request) {
        log.info("Attempting to update reservation with id: {}", id);
        Reservation reservation = reservationRepository.findById(id)
                .orElseThrow(() -> {
                    log.warn("Reservation update failed: id '{}' not found", id);
                    return new ReservationNotFoundException("Reservation not found.");
                });

        UUID currentSessionId = reservation.getSession() != null ? reservation.getSession().getId() : null;
        UUID currentSeatId = reservation.getSeat() != null ? reservation.getSeat().getId() : null;

        if (!currentSessionId.equals(request.getSessionId()) || !currentSeatId.equals(request.getSeatId())) {
            if (reservationRepository.existsBySession_IdAndSeat_Id(request.getSessionId(), request.getSeatId())) {
                log.warn("Reservation update failed: seat already reserved for this session");
                throw new ReservationSeatUnavailableException("This seat is already reserved for the selected session.");
            }
        }
        if (reservation.getStatus() == null || (!reservation.getStatus().equals(ReservationStatus.PRE_RESERVED) && !reservation.getStatus().equals(ReservationStatus.PAID))) {
            log.warn("Reservation update failed: invalid status '{}'", reservation.getStatus());
            throw new ReservationStatusInvalidException("Invalid reservation status.");
        }

        Session session = new Session();
        session.setId(request.getSessionId());
        Seat seat = new Seat();
        seat.setId(request.getSeatId());

        reservation.setSession(session);
        reservation.setSeat(seat);
        reservation.setStatus(reservation.getStatus());
        Reservation updated = reservationRepository.saveAndFlush(reservation);
        log.info("Reservation updated successfully with id: {}", updated.getId());
        return reservationMapper.toDTO(updated);
    }

    @Override
    @Transactional
    public void delete(UUID id) {
        log.info("Attempting to delete reservation with id: {}", id);
        Reservation reservation = reservationRepository.findById(id)
                .orElseThrow(() -> {
                    log.warn("Reservation deletion failed: id '{}' not found", id);
                    return new ReservationNotFoundException("Reservation not found.");
                });
        if (reservation.getStatus() == ReservationStatus.PAID) {
            log.warn("Reservation deletion failed: reservation already paid");
            throw new ReservationDeleteNotAllowedException("Cannot delete a reservation that has already been paid.");
        }
        reservationRepository.delete(reservation);
        log.info("Reservation deleted successfully with id: {}", id);
    }

    @Override
    @Transactional(readOnly = true)
    public ReservationResponseDTO getById(UUID id) {
        log.info("Fetching reservation with id: {}", id);
        Reservation reservation = reservationRepository.findById(id)
                .orElseThrow(() -> {
                    log.warn("Reservation fetch failed: id '{}' not found", id);
                    return new ReservationNotFoundException("Reservation not found.");
                });
        log.info("Reservation fetched successfully with id: {}", id);
        return reservationMapper.toDTO(reservation);
    }

    @Override
    @Transactional(readOnly = true)
    public List<ReservationResponseDTO> getAll() {
        log.info("Fetching all reservations");
        List<ReservationResponseDTO> reservations = reservationRepository.findAll()
                .stream()
                .map(reservationMapper::toDTO)
                .collect(Collectors.toList());
        log.info("Fetched {} reservations", reservations.size());
        return reservations;
    }

    @Override
    @Transactional(readOnly = true)
    public List<ReservationResponseDTO> getBySessionId(UUID sessionId) {
        log.info("Fetching reservations for session: {}", sessionId);
        List<ReservationResponseDTO> reservations = reservationRepository.findAllBySession_Id(sessionId)
                .stream()
                .map(reservationMapper::toDTO)
                .collect(Collectors.toList());
        log.info("Fetched {} reservations for session: {}", reservations.size(), sessionId);
        return reservations;
    }


  /*  Sonraki AdÄ±m: Rezervasyon SonrasÄ± Ä°ÅŸlemleri ve Ä°ÅŸ AkÄ±ÅŸÄ± YÃ¶netimi
1. Rezervasyon SonrasÄ±:
    Rezervasyon yapÄ±ldÄ±ktan sonra, kullanÄ±cÄ±ya rezervasyon detaylarÄ±nÄ±n onaylandÄ±ÄŸÄ± bir bildirim (email, SMS, push notification) gÃ¶nderilmeli.

    Rezervasyonun durumu (status) PRE_RESERVED iken, belirli bir sÃ¼re iÃ§erisinde kullanÄ±cÄ± Ã¶deme yapmazsa rezervasyonun iptal edilmesi (timeout mekanizmasÄ±).

    Ã–deme onayÄ± gelirse rezervasyonun durumu CONFIRMED olarak gÃ¼ncellenmeli.

            2. Ã–deme Ä°ÅŸlemi Entegrasyonu:
    Ã–deme servisinin entegre edilmesi (Ã¶rneÄŸin Stripe, PayPal vb.).

    Ã–deme baÅŸarÄ±yla tamamlanÄ±rsa, rezervasyon durumu gÃ¼ncellenmeli.

    Ã–deme baÅŸarÄ±sÄ±zsa veya iptal edilirse, rezervasyon iptal edilmeli.

3. Koltuk YÃ¶netimi:
    Rezervasyon yapÄ±lÄ±rken seÃ§ilen koltuklarÄ±n baÅŸka bir rezervasyon tarafÄ±ndan bloke edilmemesi iÃ§in kilitleme (locking) mekanizmasÄ± eklenmeli.

    AynÄ± koltuÄŸun Ã§ift rezervasyonunun engellenmesi.

4. Admin Paneli / YÃ¶netim:
    RezervasyonlarÄ±n listelenmesi, filtrelenmesi, iptali veya durumu deÄŸiÅŸtirme yetkisi.

    KullanÄ±cÄ±larÄ±n rezervasyon geÃ§miÅŸlerinin gÃ¶rÃ¼ntÃ¼lenmesi.

            5. GeliÅŸmiÅŸ DoÄŸrulamalar ve Hata YÃ¶netimi:
    Rezervasyon yapÄ±lÄ±rken seans, koltuk, salon ve kullanÄ±cÄ± doÄŸrulamalarÄ±nÄ±n tam ve eksiksiz yapÄ±lmasÄ±.

    Hata ve edge-case senaryolarÄ± iÃ§in exception handling geliÅŸtirilmesi.*/
}